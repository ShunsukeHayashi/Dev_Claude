name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ========== Linting and Code Quality ==========
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy
          if [ -f mcp-server/requirements.txt ]; then
            pip install -r mcp-server/requirements.txt
          fi
      
      - name: Run Ruff linter
        run: |
          ruff check mcp-server/src --format=github
      
      - name: Check Black formatting
        run: |
          black --check mcp-server/src
      
      - name: Run MyPy type checking
        run: |
          mypy mcp-server/src --ignore-missing-imports
        continue-on-error: true
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Check YAML files
        run: |
          npm install -g js-yaml
          find . -name "*.yml" -o -name "*.yaml" | xargs -I {} js-yaml {}

  # ========== Unit Tests ==========
  test-mcp-server:
    name: Test MCP Server
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          cd mcp-server && pip install -e .
      
      - name: Run unit tests
        run: |
          cd mcp-server
          pytest tests/ -v --cov=yaml_context_engineering --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./mcp-server/coverage.xml
          flags: mcp-server
          name: mcp-server-coverage

  # ========== Integration Tests ==========
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-mcp-server]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install MCP server
        run: |
          cd mcp-server && pip install -e .
      
      - name: Run integration tests
        run: |
          chmod +x test-claude-code/*.sh
          ./test-claude-code/test-integration.sh
      
      - name: Test slash commands
        run: |
          ./test-claude-code/test-slash-commands.sh
      
      - name: Test sub-agents
        run: |
          ./test-claude-code/test-subagents.sh

  # ========== Security Scanning ==========
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ========== Build and Package ==========
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test-mcp-server, integration-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Build MCP server package
        run: |
          cd mcp-server
          python -m pip install --upgrade pip build
          python -m build
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mcp-server-dist
          path: mcp-server/dist/
      
      - name: Create Claude Code package
        run: |
          tar -czf claude-code-package.tar.gz \
            .claude/ \
            config.yaml \
            README.md \
            PLANNING.md
      
      - name: Upload Claude Code package
        uses: actions/upload-artifact@v3
        with:
          name: claude-code-package
          path: claude-code-package.tar.gz

  # ========== Documentation ==========
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install documentation tools
        run: |
          pip install mkdocs mkdocs-material mkdocstrings[python]
      
      - name: Build documentation
        run: |
          # Create mkdocs.yml if it doesn't exist
          if [ ! -f mkdocs.yml ]; then
            cat > mkdocs.yml << EOF
site_name: YAML Context Engineering Agent
theme:
  name: material
  features:
    - navigation.tabs
    - navigation.sections
    - toc.integrate
nav:
  - Home: README.md
  - Planning: PLANNING.md
  - Claude Code:
    - Commands: .claude/commands/README.md
    - Agents: .claude/agents/README.md
    - Hooks: .claude/hooks/README.md
  - MCP Server: mcp-server/README.md
  - Testing: test-claude-code/README.md
EOF
          fi
          # mkdocs build --strict
          echo "Documentation build placeholder"
      
      - name: Update documentation timestamps
        run: |
          echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> docs/last-updated.txt

  # ========== Release ==========
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mcp-server-dist/*
            claude-code-package/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========== Status Check ==========
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, test-mcp-server, integration-test, security-scan, build]
    if: always()
    
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test-mcp-server.result }}" != "success" ] || \
             [ "${{ needs.integration-test.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "CI failed"
            exit 1
          else
            echo "CI passed successfully! ðŸŽ‰"
          fi